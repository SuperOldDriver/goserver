// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package ws is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	ScoreReq
	RpcStatus
	MsgReq
	Token
	UserBase
*/
package ws

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ScoreReq struct {
	UserId    int64  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	Fee       int64  `protobuf:"varint,2,opt,name=Fee" json:"Fee,omitempty"`
	EntityId  string `protobuf:"bytes,3,opt,name=EntityId" json:"EntityId,omitempty"`
	ScoreType string `protobuf:"bytes,4,opt,name=ScoreType" json:"ScoreType,omitempty"`
	ScoreDesc string `protobuf:"bytes,5,opt,name=ScoreDesc" json:"ScoreDesc,omitempty"`
}

func (m *ScoreReq) Reset()                    { *m = ScoreReq{} }
func (m *ScoreReq) String() string            { return proto.CompactTextString(m) }
func (*ScoreReq) ProtoMessage()               {}
func (*ScoreReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ScoreReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ScoreReq) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *ScoreReq) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *ScoreReq) GetScoreType() string {
	if m != nil {
		return m.ScoreType
	}
	return ""
}

func (m *ScoreReq) GetScoreDesc() string {
	if m != nil {
		return m.ScoreDesc
	}
	return ""
}

type RpcStatus struct {
	Code int32  `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *RpcStatus) Reset()                    { *m = RpcStatus{} }
func (m *RpcStatus) String() string            { return proto.CompactTextString(m) }
func (*RpcStatus) ProtoMessage()               {}
func (*RpcStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RpcStatus) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcStatus) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MsgReq struct {
	UserId       int64  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	FromUserId   int64  `protobuf:"varint,2,opt,name=FromUserId" json:"FromUserId,omitempty"`
	Title        string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty"`
	Body         string `protobuf:"bytes,4,opt,name=Body" json:"Body,omitempty"`
	EntityId     string `protobuf:"bytes,5,opt,name=EntityId" json:"EntityId,omitempty"`
	MsgType      string `protobuf:"bytes,6,opt,name=MsgType" json:"MsgType,omitempty"`
	FromUsername string `protobuf:"bytes,7,opt,name=FromUsername" json:"FromUsername,omitempty"`
	GroupId      string `protobuf:"bytes,8,opt,name=GroupId" json:"GroupId,omitempty"`
}

func (m *MsgReq) Reset()                    { *m = MsgReq{} }
func (m *MsgReq) String() string            { return proto.CompactTextString(m) }
func (*MsgReq) ProtoMessage()               {}
func (*MsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MsgReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgReq) GetFromUserId() int64 {
	if m != nil {
		return m.FromUserId
	}
	return 0
}

func (m *MsgReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgReq) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *MsgReq) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *MsgReq) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *MsgReq) GetFromUsername() string {
	if m != nil {
		return m.FromUsername
	}
	return ""
}

func (m *MsgReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	Ua    string `protobuf:"bytes,2,opt,name=Ua" json:"Ua,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetUa() string {
	if m != nil {
		return m.Ua
	}
	return ""
}

type UserBase struct {
	Result   bool   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	UserId   int64  `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=Username" json:"Username,omitempty"`
	Score    int64  `protobuf:"varint,4,opt,name=Score" json:"Score,omitempty"`
}

func (m *UserBase) Reset()                    { *m = UserBase{} }
func (m *UserBase) String() string            { return proto.CompactTextString(m) }
func (*UserBase) ProtoMessage()               {}
func (*UserBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserBase) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UserBase) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserBase) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*ScoreReq)(nil), "ws.ScoreReq")
	proto.RegisterType((*RpcStatus)(nil), "ws.RpcStatus")
	proto.RegisterType((*MsgReq)(nil), "ws.MsgReq")
	proto.RegisterType((*Token)(nil), "ws.Token")
	proto.RegisterType((*UserBase)(nil), "ws.UserBase")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcUser service

type RpcUserClient interface {
	Verify(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserBase, error)
	//    rpc UpCount (UpReq) returns (UpResp); //修改统计数据
	Msg(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*RpcStatus, error)
	UpScore(ctx context.Context, in *ScoreReq, opts ...grpc.CallOption) (*RpcStatus, error)
}

type rpcUserClient struct {
	cc *grpc.ClientConn
}

func NewRpcUserClient(cc *grpc.ClientConn) RpcUserClient {
	return &rpcUserClient{cc}
}

func (c *rpcUserClient) Verify(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserBase, error) {
	out := new(UserBase)
	err := grpc.Invoke(ctx, "/ws.RpcUser/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserClient) Msg(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*RpcStatus, error) {
	out := new(RpcStatus)
	err := grpc.Invoke(ctx, "/ws.RpcUser/Msg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserClient) UpScore(ctx context.Context, in *ScoreReq, opts ...grpc.CallOption) (*RpcStatus, error) {
	out := new(RpcStatus)
	err := grpc.Invoke(ctx, "/ws.RpcUser/UpScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcUser service

type RpcUserServer interface {
	Verify(context.Context, *Token) (*UserBase, error)
	//    rpc UpCount (UpReq) returns (UpResp); //修改统计数据
	Msg(context.Context, *MsgReq) (*RpcStatus, error)
	UpScore(context.Context, *ScoreReq) (*RpcStatus, error)
}

func RegisterRpcUserServer(s *grpc.Server, srv RpcUserServer) {
	s.RegisterService(&_RpcUser_serviceDesc, srv)
}

func _RpcUser_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.RpcUser/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserServer).Verify(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUser_Msg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserServer).Msg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.RpcUser/Msg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserServer).Msg(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUser_UpScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserServer).UpScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.RpcUser/UpScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserServer).UpScore(ctx, req.(*ScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ws.RpcUser",
	HandlerType: (*RpcUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _RpcUser_Verify_Handler,
		},
		{
			MethodName: "Msg",
			Handler:    _RpcUser_Msg_Handler,
		},
		{
			MethodName: "UpScore",
			Handler:    _RpcUser_UpScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// Client API for RpcAdmin service

type RpcAdminClient interface {
	Verify(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserBase, error)
}

type rpcAdminClient struct {
	cc *grpc.ClientConn
}

func NewRpcAdminClient(cc *grpc.ClientConn) RpcAdminClient {
	return &rpcAdminClient{cc}
}

func (c *rpcAdminClient) Verify(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserBase, error) {
	out := new(UserBase)
	err := grpc.Invoke(ctx, "/ws.RpcAdmin/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcAdmin service

type RpcAdminServer interface {
	Verify(context.Context, *Token) (*UserBase, error)
}

func RegisterRpcAdminServer(s *grpc.Server, srv RpcAdminServer) {
	s.RegisterService(&_RpcAdmin_serviceDesc, srv)
}

func _RpcAdmin_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcAdminServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.RpcAdmin/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcAdminServer).Verify(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ws.RpcAdmin",
	HandlerType: (*RpcAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _RpcAdmin_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xe2, 0x30,
	0x10, 0x55, 0x12, 0xf2, 0x35, 0x62, 0x57, 0x2b, 0x0b, 0xad, 0xac, 0x68, 0xb5, 0x62, 0x73, 0x58,
	0x71, 0x01, 0xa9, 0xf4, 0x17, 0x94, 0xb6, 0x54, 0x1c, 0xb8, 0x18, 0xd2, 0x7b, 0x9a, 0xb8, 0x28,
	0x2a, 0xc4, 0x69, 0x9c, 0x14, 0xe5, 0x3f, 0xf4, 0x37, 0xf6, 0xb7, 0x54, 0x9e, 0x98, 0xf0, 0x71,
	0xa8, 0x7a, 0x7b, 0xef, 0x8d, 0xc7, 0x7e, 0x6f, 0xc6, 0x00, 0xb5, 0xe4, 0xe5, 0xa4, 0x28, 0x45,
	0x25, 0x88, 0xb9, 0x97, 0xe1, 0xbb, 0x01, 0xde, 0x2a, 0x11, 0x25, 0x67, 0xfc, 0x95, 0xfc, 0x06,
	0x27, 0x92, 0xbc, 0x5c, 0xa4, 0xd4, 0x18, 0x1a, 0x23, 0x8b, 0x69, 0x46, 0x7e, 0x81, 0x35, 0xe7,
	0x9c, 0x9a, 0x28, 0x2a, 0x48, 0x02, 0xf0, 0xee, 0xf3, 0x2a, 0xab, 0x9a, 0x45, 0x4a, 0xad, 0xa1,
	0x31, 0xf2, 0x59, 0xc7, 0xc9, 0x1f, 0xf0, 0xf1, 0xc6, 0x75, 0x53, 0x70, 0xda, 0xc3, 0xe2, 0x51,
	0xe8, 0xaa, 0x77, 0x5c, 0x26, 0xd4, 0x3e, 0xa9, 0x2a, 0x21, 0xbc, 0x02, 0x9f, 0x15, 0xc9, 0xaa,
	0x8a, 0xab, 0x5a, 0x12, 0x02, 0xbd, 0x5b, 0x91, 0x72, 0x34, 0x63, 0x33, 0xc4, 0xca, 0xca, 0x52,
	0x6e, 0xd0, 0x8a, 0xcf, 0x14, 0x0c, 0x3f, 0x0c, 0x70, 0x96, 0x72, 0xf3, 0x95, 0xff, 0xbf, 0x00,
	0xf3, 0x52, 0xec, 0x74, 0xad, 0x8d, 0x71, 0xa2, 0x90, 0x01, 0xd8, 0xeb, 0xac, 0xda, 0x72, 0x1d,
	0xa5, 0x25, 0xea, 0xf9, 0x99, 0x48, 0x1b, 0x1d, 0x01, 0xf1, 0x59, 0x6e, 0xfb, 0x22, 0x37, 0x05,
	0x77, 0x29, 0x37, 0x98, 0xda, 0xc1, 0xd2, 0x81, 0x92, 0x10, 0xfa, 0x87, 0xd7, 0xf2, 0x78, 0xc7,
	0xa9, 0x8b, 0xe5, 0x33, 0x4d, 0x75, 0x3f, 0x94, 0xa2, 0x2e, 0x16, 0x29, 0xf5, 0xda, 0x6e, 0x4d,
	0xc3, 0x31, 0xd8, 0x6b, 0xf1, 0xc2, 0x73, 0xb4, 0xa9, 0x00, 0xa6, 0x53, 0x36, 0x51, 0xfd, 0x09,
	0x66, 0x14, 0xeb, 0x81, 0x98, 0x51, 0x1c, 0x6e, 0xc1, 0x53, 0x97, 0xce, 0x62, 0xc9, 0xd5, 0x40,
	0x18, 0x97, 0xf5, 0xb6, 0xc2, 0x16, 0x8f, 0x69, 0x76, 0x32, 0x28, 0xf3, 0x6c, 0x50, 0x41, 0xdb,
	0x8b, 0x26, 0xf5, 0x5a, 0x3b, 0x83, 0x03, 0xb0, 0x71, 0x4f, 0x38, 0x0f, 0x8b, 0xb5, 0x64, 0xfa,
	0x06, 0x2e, 0x2b, 0x12, 0x75, 0x88, 0xfc, 0x03, 0xe7, 0x91, 0x97, 0xd9, 0x73, 0x43, 0xfc, 0xc9,
	0x5e, 0x4e, 0xd0, 0x5d, 0xd0, 0x57, 0xb0, 0xf3, 0x33, 0xc4, 0xed, 0x11, 0x50, 0x62, 0xbb, 0xb3,
	0xe0, 0x87, 0xc2, 0xc7, 0x9d, 0xff, 0x07, 0x37, 0x2a, 0xf0, 0x6a, 0x82, 0xad, 0x87, 0xbf, 0x79,
	0x71, 0x6e, 0x3a, 0x06, 0x8f, 0x15, 0xc9, 0x4d, 0xba, 0xcb, 0xf2, 0x6f, 0x3c, 0xfc, 0xe4, 0xe0,
	0x8f, 0xbf, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x96, 0x19, 0x68, 0x1f, 0xff, 0x02, 0x00, 0x00,
}
